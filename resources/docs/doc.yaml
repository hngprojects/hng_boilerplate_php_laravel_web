openapi: 3.0.0
info:
  title: Language Learning AI Game API
  version: 1.0.0
  description: API documentation for the Language Learning AI Game

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/timiajayi/help-center-search/1.0.0
  - url: https://example.com/api/v1
    description: Production server
  - url: https://staging.example.com/api/v1
    description: Staging server
  - url: https://deployment.api-php.boilerplate.hng.tech/api/v1
    description: deplyment server

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
            example:
              first_name: John
              last_name: Doe
              email: john@example.com
              password: securepassword123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                user:
                  id: 1
                  first_name: John
                  last_name: Doe
                  email: john@example.com

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
            example:
              email: john@example.com
              password: securepassword123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                user:
                  id: 1
                  first_name: John
                  last_name: Doe
                  email: john@example.com

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Successfully logged out

  /auth/password-reset-email:
    post:
      tags:
        - Authentication
      summary: Request password reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetEmailInput'
            example:
              email: john@example.com
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Password reset email sent successfully

  /auth/request-password-request/{token}:
    post:
      tags:
        - Authentication
      summary: Reset password
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordInput'
            example:
              password: newpassword123
              password_confirmation: newpassword123
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Password reset successfully

  /roles:
    post:
      tags:
        - Roles
      summary: Create a new role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleInput'
            example:
              name: admin
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
              example:
                id: 1
                name: admin

  /auth/login-google:
    get:
      tags:
        - Authentication
      summary: Redirect to Google for authentication
      responses:
        '302':
          description: Redirect to Google

  /auth/google/callback:
    get:
      tags:
        - Authentication
      summary: Handle Google authentication callback
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                user:
                  id: 1
                  first_name: John
                  last_name: Doe
                  email: john@example.com

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example:
                - id: 1
                  first_name: John
                  last_name: Doe
                  email: john@example.com
                - id: 2
                  first_name: Jane
                  last_name: Smith
                  email: jane@example.com
    post:
      tags:
        - Users
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
            example:
              first_name: Alice
              last_name: Johnson
              email: alice@example.com
              password: securepassword123
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 3
                first_name: Alice
                last_name: Johnson
                email: alice@example.com

  /products/categories:
    get:
      tags:
        - Products
      summary: Get all product categories
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
              example:
                - id: 1
                  name: Electronics
                - id: 2
                  name: Books

  /products/search:
    get:
      tags:
        - Products
      summary: Search products
      parameters:
        - name: query
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              example:
                - id: 1
                  name: Smartphone
                  description: Latest model smartphone
                  price: 599.99
                  category_id: 1

  /topics/search:
    get:
      tags:
        - Topics
      summary: Search topics
      parameters:
        - name: query
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
              example:
                - id: 1
                  title: Introduction to AI
                  content: AI is a rapidly growing field...

  /products:
    get:
      tags:
        - Products
      summary: Get all products
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              example:
                - id: 1
                  name: Smartphone
                  description: Latest model smartphone
                  price: 599.99
                  category_id: 1
                - id: 2
                  name: Laptop
                  description: High-performance laptop
                  price: 1299.99
                  category_id: 1
    post:
      tags:
        - Products
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
            example:
              name: Tablet
              description: 10-inch tablet with retina display
              price: 399.99
              category_id: 1
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              example:
                id: 3
                name: Tablet
                description: 10-inch tablet with retina display
                price: 399.99
                category_id: 1

  /products/{productId}:
    delete:
      tags:
        - Products
      summary: Delete a product
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Product deleted successfully

  /help-center/topics/search:
    get:
      tags:
        - Help Center
      summary: Search help center topics
      parameters:
        - name: query
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HelpArticle'
              example:
                - id: 1
                  title: How to reset password
                  content: Follow these steps to reset your password...
                  category: Account Management

  /contact:
    post:
      tags:
        - Contact
      summary: Send an inquiry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInput'
            example:
              name: John Doe
              email: john@example.com
              message: I have a question about your services.
      responses:
        '200':
          description: Inquiry sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Your inquiry has been sent successfully

  /blogs/latest:
    get:
      tags:
        - Blogs
      summary: Get latest blog posts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
              example:
                - id: 1
                  title: Latest AI Trends
                  content: AI is revolutionizing various industries...
                  author: John Doe
                  created_at: '2023-07-23T10:00:00Z'

  /blogs/search:
    get:
      tags:
        - Blogs
      summary: Search blog posts
      parameters:
        - name: query
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
              example:
                - id: 1
                  title: Latest AI Trends
                  content: AI is revolutionizing various industries...
                  author: John Doe
                  created_at: '2023-07-23T10:00:00Z'

  /squeeze:
    post:
      tags:
        - Squeeze
      summary: Create a squeeze page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SqueezeInput'
            example:
              email: john@example.com
              name: John Doe
      responses:
        '201':
          description: Squeeze page created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Squeeze page created successfully

  /help-center/topics:
    post:
      tags:
        - Help Center
      summary: Create a new help article
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelpArticle'
            example:
              title: How to use our product
              content: Follow these steps to use our product effectively...
              category: Product Usage
      responses:
        '201':
          description: Help article created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpArticle'
              example:
                id: 2
                title: How to use our product
                content: Follow these steps to use our product effectively...
                category: Product Usage
    get:
      tags:
        - Help Center
      summary: Get all help articles
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HelpArticle'
              example:
                - id: 1
                  title: How to reset password
                  content: Follow these steps to reset your password...
                  category: Account Management
                - id: 2
                  title: How to use our product
                  content: Follow these steps to use our product effectively...
                  category: Product Usage

  /help-center/topics/{articleId}:
    patch:
      tags:
        - Help Center
      summary: Update a help article
      security:
        - bearerAuth: []
      parameters:
        - name: articleId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuccessResponse'
            example:
              title: 
              Updated: How to use our product
              content: Here are the updated steps to use our product effectively...
              category: Product Usage
      responses:
        '200':
          description: Help article updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpArticle'
              example:
                id: 2
                title: 
                Updated: How to use our product
                content: Here are the updated steps to use our product effectively...
                category: Product Usage
    delete:
      tags:
        - Help Center
      summary: Delete a help article
      security:
        - bearerAuth: []
      parameters:
        - name: articleId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Help article deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Help article deleted successfully

  /invitations/generate:
    post:
      tags:
        - Invitations
      summary: Generate an invitation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationInput'
            example:
              email: newuser@example.com
              role: member
      responses:
        '201':
          description: Invitation generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationResponse'
              example:
                message: Invitation sent successfully
                invitation_token: abc123xyz789

  /invite/accept:
    get:
      tags:
        - Invitations
      summary: Accept an invitation (redirect)
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirect to invitation acceptance page

  /invite:
    post:
      tags:
        - Invitations
      summary: Accept an invitation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationAcceptInput'
            example:
              token: abc123xyz789
              first_name: Jane
              last_name: Doe
              password: securepassword123
      responses:
        '200':
          description: Invitation accepted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                user:
                  id: 4
                  first_name: Jane
                  last_name: Doe
                  email: jane@example.com

  /features:
    get:
      tags:
        - Features
      summary: Get all features
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
              example:
                - id: 1
                  name: Advanced Analytics
                  description: Access to advanced analytics tools
                - id: 2
                  name: Priority Support
                  description: 24/7 priority customer support
    post:
      tags:
        - Features
      summary: Create a new feature
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureInput'
            example:
              name: Custom Branding
              description: Ability to add custom branding to the platform
      responses:
        '201':
          description: Feature created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
              example:
                id: 3
                name: Custom Branding
                description: Ability to add custom branding to the platform

  /features/{feature}:
    get:
      tags:
        - Features
      summary: Get a specific feature
      security:
        - bearerAuth: []
      parameters:
        - name: feature
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
              example:
                id: 1
                name: Advanced Analytics
                description: Access to advanced analytics tools
    put:
      tags:
        - Features
      summary: Update a feature
      security:
        - bearerAuth: []
      parameters:
        - name: feature
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureInput'
            example:
              name: Enhanced Analytics
              description: Access to enhanced and real-time analytics tools
      responses:
        '200':
          description: Feature updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
              example:
                id: 1
                name: Enhanced Analytics
                description: Access to enhanced and real-time analytics tools
    delete:
      tags:
        - Features
      summary: Delete a feature
      security:
        - bearerAuth: []
      parameters:
        - name: feature
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Feature deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Feature deleted successfully

  /plans:
    get:
      tags:
        - Plans
      summary: Get all subscription plans
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
              example:
                - id: 1
                  name: Basic
                  price: 9.99
                  features:
                    - id: 1
                      name: Basic Analytics
                - id: 2
                  name: Pro
                  price: 19.99
                  features:
                    - id: 1
                      name: Basic Analytics
                    - id: 2
                      name: Priority Support
    post:
      tags:
        - Plans
      summary: Create a new subscription plan
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanInput'
            example:
              name: Enterprise
              price: 49.99
              features: [1, 2, 3]
      responses:
        '201':
          description: Plan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
              example:
                id: 3
                name: Enterprise
                price: 49.99
                features:
                  - id: 1
                    name: Basic Analytics
                  - id: 2
                    name: Priority Support
                  - id: 3
                    name: Custom Branding

  /plans/{plan}:
    get:
      tags:
        - Plans
      summary: Get a specific subscription plan
      security:
        - bearerAuth: []
      parameters:
        - name: plan
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
              example:
                id: 1
                name: Basic
                price: 9.99
                features:
                  - id: 1
                    name: Basic Analytics
    put:
      tags:
        - Plans
      summary: Update a subscription plan
      security:
        - bearerAuth: []
      parameters:
        - name: plan
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanInput'
            example:
              name: Basic Plus
              price: 14.99
              features: [1, 2]
      responses:
        '200':
          description: Plan updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
              example:
                id: 1
                name: Basic Plus
                price: 14.99
                features:
                  - id: 1
                    name: Basic Analytics
                  - id: 2
                    name: Priority Support
    delete:
      tags:
        - Plans
      summary: Delete a subscription plan
      security:
        - bearerAuth: []
      parameters:
        - name: plan
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Plan deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Subscription plan deleted successfully

  /users/plans/{user_subscription}/cancel:
    post:
      tags:
        - Subscriptions
      summary: Cancel a user's subscription
      security:
        - bearerAuth: []
      parameters:
        - name: user_subscription
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Subscription cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Subscription cancelled successfully

  /organisations:
    post:
      tags:
        - Organisations
      summary: Create a new organisation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationInput'
            example:
              name: Acme Corp
              description: Leading innovation company
      responses:
        '201':
          description: Organisation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
              example:
                id: 1
                name: Acme Corp
                description: Leading innovation company
    get:
      tags:
        - Organisations
      summary: Get all organisations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation'
              example:
                - id: 1
                  name: Acme Corp
                  description: Leading innovation company
                - id: 2
                  name: Tech Innovators
                  description: Cutting-edge technology solutions

  /organisations/{org_id}:
    put:
      tags:
        - Organisations
      summary: Update an organisation
      security:
        - bearerAuth: []
      parameters:
        - name: org_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationInput'
            example:
              name: Acme Corporation
              description: Global leader in innovation
      responses:
        '200':
          description: Organisation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
              example:
                id: 1
                name: Acme Corporation
                description: Global leader in innovation
    delete:
      tags:
        - Organisations
      summary: Delete an organisation
      security:
        - bearerAuth: []
      parameters:
        - name: org_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Organisation deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Organisation deleted successfully

  /organisations/{org_id}/users/{user_id}:
    delete:
      tags:
        - Organisations
      summary: Remove a user from an organisation
      security:
        - bearerAuth: []
      parameters:
        - name: org_id
          in: path
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User removed from organisation successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: User removed from organisation successfully

  /organisations/{organisation}/members:
    get:
      tags:
        - Organisations
      summary: Get all members of an organisation
      security:
        - bearerAuth: []
      parameters:
        - name: organisation
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example:
                - id: 1
                  first_name: John
                  last_name: Doe
                  email: john@example.com
                - id: 2
                  first_name: Jane
                  last_name: Smith
                  email: jane@example.com

  /testimonials:
    post:
      tags:
        - Testimonials
      summary: Create a new testimonial
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestimonialInput'
            example:
              content: This product has revolutionized our workflow!
              rating: 5
      responses:
        '201':
          description: Testimonial created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testimonial'
              example:
                id: 1
                user_id: 1
                content: This product has revolutionized our workflow!
                rating: 5

  /testimonials/{testimonial_id}:
    get:
      tags:
        - Testimonials
      summary: Get a specific testimonial
      security:
        - bearerAuth: []
      parameters:
        - name: testimonial_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testimonial'
              example:
                id: 1
                user_id: 1
                content: This product has revolutionized our workflow!
                rating: 5
    delete:
      tags:
        - Testimonials
      summary: Delete a testimonial
      security:
        - bearerAuth: []
      parameters:
        - name: testimonial_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Testimonial deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Testimonial deleted successfully

  /jobs:
    post:
      tags:
        - Jobs
      summary: Create a new job
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobInput'
            example:
              title: Software Engineer
              description: We're looking for a talented software engineer to join our team.
              location: Remote
              salary: 100000
      responses:
        '201':
          description: Job created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
              example:
                id: 1
                title: Software Engineer
                description: We're looking for a talented software engineer to join our team.
                location: Remote
                salary: 100000
    get:
      tags:
        - Jobs
      summary: Get all jobs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
              example:
                - id: 1
                  title: Software Engineer
                  description: We're looking for a talented software engineer to join our team.
                  location: Remote
                  salary: 100000
                - id: 2
                  title: Product Manager
                  description: Seeking an experienced product manager to lead our team.
                  location: New York, NY
                  salary: 120000

  /jobs/{id}:
    put:
      tags:
        - Jobs
      summary: Update a job
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobInput'
            example:
              title: Senior Software Engineer
              description: We're looking for a senior software engineer to lead our development team.
              location: Remote
              salary: 130000
      responses:
        '200':
          description: Job updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
              example:
                id: 1
                title: Senior Software Engineer
                description: We're looking for a senior software engineer to lead our development team.
                location: Remote
                salary: 130000
    delete:
      tags:
        - Jobs
      summary: Delete a job
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Job deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Job deleted successfully
    get:
      tags:
        - Jobs
      summary: Get a specific job
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
              example:
                id: 1
                title: Senior Software Engineer
                description: We're looking for a senior software engineer to lead our development team.
                location: Remote
                salary: 130000

  /jobs/search:
    get:
      tags:
        - Jobs
      summary: Search jobs
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
              example:
                - id: 1
                  title: Senior Software Engineer
                  description: We're looking for a senior software engineer to lead our development team.
                  location: Remote
                  salary: 130000

  /user/export/{format}:
    get:
      tags:
        - Users
      summary: Export user data
      security:
        - bearerAuth: []
      parameters:
        - name: format
          in: path
          required: true
          schema:
            type: string
            enum: [csv, json]
      responses:
        '200':
          description: User data exported successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  /accounts/deactivate:
    patch:
      tags:
        - Accounts
      summary: Deactivate user account
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Account deactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Account deactivated successfully

  /organisations/{org_id}/roles/{role_id}:
    put:
      tags:
        - Roles
      summary: Update a role in an organisation
      security:
        - bearerAuth: []
      parameters:
        - name: org_id
          in: path
          required: true
          schema:
            type: integer
        - name: role_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleInput'
            example:
              name: Senior Manager
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
              example:
                id: 1
                name: Senior Manager

  /organisations/{org_id}/roles/{role_id}/disable:
    put:
      tags:
        - Roles
      summary: Disable a role in an organisation
      security:
        - bearerAuth: []
      parameters:
        - name: org_id
          in: path
          required: true
          schema:
            type: integer
        - name: role_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Role disabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Role disabled successfully

  /customers:
    get:
      tags:
        - Customers
      summary: Get all customers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
              example:
                - id: 1
                  name: John Doe
                  email: john@example.com
                  company: Acme Corp
                - id: 2
                  name: Jane Smith
                  email: jane@example.com
                  company: Tech Innovators

  /blogs:
    post:
      tags:
        - Blogs
      summary: Create a new blog post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogInput'
            example:
              title: The Future of AI
              content: AI is rapidly evolving and changing the way we live and work...
              category_id: 1
      responses:
        '201':
          description: Blog post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
              example:
                id: 1
                title: The Future of AI
                content: AI is rapidly evolving and changing the way we live and work...
                category_id: 1
                author: John Doe
                created_at: '2023-07-24T10:00:00Z'
    get:
      tags:
        - Blogs
      summary: Get all blog posts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
              example:
                - id: 1
                  title: The Future of AI
                  content: AI is rapidly evolving and changing the way we live and work...
                  category_id: 1
                  author: John Doe
                  created_at: '2023-07-24T10:00:00Z'
                - id: 2
                  title: Machine Learning Basics
                  content: An introduction to the fundamental concepts of machine learning...
                  category_id: 2
                  author: Jane Smith
                  created_at: '2023-07-25T11:30:00Z'

  /blogs/edit/{id}:
    patch:
      tags:
        - Blogs
      summary: Update a blog post
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogInput'
            example:
              title: The Evolving Future of AI
              content: AI is rapidly evolving and revolutionizing the way we live and work...
              category_id: 1
      responses:
        '200':
          description: Blog post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
              example:
                id: 1
                title: The Evolving Future of AI
                content: AI is rapidly evolving and revolutionizing the way we live and work...
                category_id: 1
                author: John Doe
                created_at: '2023-07-24T10:00:00Z'
                updated_at: '2023-07-26T09:15:00Z'

  /blogs/{id}:
    delete:
      tags:
        - Blogs
      summary: Delete a blog post
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Blog post deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: Blog post deleted successfully
    get:
      tags:
        - Blogs
      summary: Get a specific blog post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
              example:
                id: 1
                title: The Evolving Future of AI
                content: AI is rapidly evolving and revolutionizing the way we live and work...
                category_id: 1
                author: John Doe
                created_at: '2023-07-24T10:00:00Z'
                updated_at: '2023-07-26T09:15:00Z'

  /blogs/categories:
    post:
      tags:
        - Blogs
      summary: Create a new blog category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategoryInput'
            example:
              name: Technology Trends
      responses:
        '201':
          description: Blog category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
              example:
                id: 3
                name: Technology Trends

  /user/preferences:
    post:
      tags:
        - User Preferences
      summary: Create user preferences
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreferenceInput'
            example:
              key: theme
              value: dark
      responses:
        '201':
          description: User preference created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preference'
              example:
                id: 1
                user_id: 1
                key: theme
                value: dark
    get:
      tags:
        - User Preferences
      summary: Get user preferences
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Preference'
              example:
                - id: 1
                  user_id: 1
                  key: theme
                  value: dark
                - id: 2
                  user_id: 1
                  key: language
                  value: en

  /user/preferences/{id}:
    put:
      tags:
        - User Preferences
      summary: Update user preference
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreferenceInput'
            example:
              key: theme
              value: light
      responses:
        '200':
          description: User preference updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preference'
              example:
                id: 1
                user_id: 1
                key: theme
                value: light
    delete:
      tags:
        - User Preferences
      summary: Delete user preference
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User preference deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: User preference deleted successfully

  /notification-settings/{user_id}:
    patch:
      tags:
        - Notification Settings
      summary: Update user notification settings
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettingsInput'
            example:
              email_notifications: true
              push_notifications: false
      responses:
        '200':
          description: Notification settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
              example:
                id: 1
                user_id: 1
                email_notifications: true
                push_notifications: false
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterInput:
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    LoginInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
    PasswordResetEmailInput:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
    ResetPasswordInput:
      type: object
      required:
        - password
        - password_confirmation
      properties:
        password:
          type: string
          format: password
        password_confirmation:
          type: string
          format: password
    RoleInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
        category_id:
          type: integer
    ProductInput:
      type: object
      required:
        - name
        - price
        - category_id
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        category_id:
          type: integer
    Topic:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
    HelpArticle:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        category:
          type: string
    ContactInput:
      type: object
      required:
        - name
        - email
        - message
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        message:
          type: string
    Blog:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        category_id:
          type: integer
        author:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    BlogInput:
      type: object
      required:
        - title
        - content
        - category_id
      properties:
        title:
          type: string
        content:
          type: string
        category_id:
          type: integer
    BlogCategory:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    BlogCategoryInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    SqueezeInput:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
        name:
          type: string
    InvitationInput:
      type: object
      required:
        - email
        - role
      properties:
        email:
          type: string
          format: email
        role:
          type: string
    InvitationResponse:
      type: object
      properties:
        message:
          type: string
        invitation_token:
          type: string
    InvitationAcceptInput:
      type: object
      required:
        - token
        - first_name
        - last_name
        - password
      properties:
        token:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        password:
          type: string
          format: password
    Feature:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    FeatureInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
    Plan:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
    PlanInput:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
        price:
          type: number
        features:
          type: array
          items:
            type: integer
    Organisation:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    OrganisationInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
    Testimonial:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        content:
          type: string
        rating:
          type: integer
    TestimonialInput:
      type: object
      required:
        - content
        - rating
      properties:
        content:
          type: string
        rating:
          type: integer
    Job:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        location:
          type: string
        salary:
          type: number
    JobInput:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
        description:
          type: string
        location:
          type: string
        salary:
          type: number
    Customer:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        company:
          type: string
    Preference:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        key:
          type: string
        value:
          type: string
    PreferenceInput:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
          type: string
    NotificationSettings:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        email_notifications:
          type: boolean
        push_notifications:
          type: boolean
    NotificationSettingsInput:
      type: object
      properties:
        email_notifications:
          type: boolean
        push_notifications:
          type: boolean
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
    
